# -*- coding: utf-8 -*-
"""Computer vision Master Class Coding- Ammar Jamshed

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aqvKm1kbiQqMNsep6heAbonWLudyYgh7
"""

# Open CV Loading the image and pre-processing it 
import cv2

# we first integrate our gooogle drive in google collab
from google.colab import drive
drive.mount('/content/drive')

image = cv2.imread(r'/content/drive/MyDrive/12-14-2020-tout.jpg')

"""# New Section"""

# check properties of the image 
image.shape

# This image has 2560 pxl width, 3840 pxl height and 3 channels(red, green, blue)

from google.colab.patches import cv2_imshow
cv2_imshow(image)

# resize the image 
image = cv2.resize(image, (800,900))
image.shape

# change image to grey
image_grey = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(image_grey)

# check the New image parametres
image_grey.shape

"""# Face Detection with Haarcascade and Opencv"""

# Face Detection with Haarcascade and Opencv
face_detector = cv2.CascadeClassifier('/content/drive/MyDrive/haarcascade_frontalcatface.xml')

detections = Face_detector.detectMultiScale(image_grey)

detections

# check the length of detections
len(detections)

for (x,y,w,z) in detections:
  print(x,y,w,z)

# ready for detction using shape parametres
for (x,y,w,z) in detections:
  cv2.rectangle(image, (x,y), (x,y), (0,255,0), 2)
  cv2_imshow(image)

# make detections on adjustments
for (x,y,w,z) in detections:
  cv2.rectangle(image, (x,y), (x + w,y), (0,255,0), 2)
  cv2_imshow(image)

# make detections on adjustments
for (x,y,w,z) in detections:
  cv2.rectangle(image, (x,y), (x+z, w+y), (0,218,0), 2)
  cv2_imshow(image)

"""## Harcascade Parametres"""

image = cv2.imread('/content/drive/MyDrive/pple2.jpg')
detections = Face_detector.detectMultiScale(image)
for (x,y,w,h) in detections:
  cv2.rectangle(image_grey, (x,y), (x+w, y+h), (0,300,0), 2)
cv2_imshow(image)



image = cv2.imread('/content/drive/MyDrive/pple2.jpg')
detections = Face_detector.detectMultiScale(image, scaleFactor=1.2, minNeighbors=7, 
                                            minSize=(20,20), maxSize=(45,45))
for (x,y,w,z) in detections:
 print(w,z)
 cv2.rectangle(image_grey, (x,y), (x+w, y+h), (0, 1000, 0), 2)
cv2_imshow(image)

image = cv2.imread('/content/drive/MyDrive/pple2.jpg')
detections = Face_detector.detectMultiScale(image, scaleFactor=1.2, minNeighbors=7, 
                                            minSize=(20,20), maxSize=(45,45))
for (x,y,w,z) in detections:
  print(w,h)
  cv2.rectangle(image_grey, (x,y), (x+w, y+h), (0, 1000, 0), 2)
cv2_imshow(image)

"""Eye Detection With Harascades"""

# Eye Detection With Harascades
eye_detector = cv2.CascadeClassifier('/content/drive/MyDrive/haarcascade_frontalcatface.xml')

image = cv2.imread('/content/drive/MyDrive/pple2.jpg')
detections = Face_detector.detectMultiScale(image)
for (x,y,w,h) in detections:
  cv2.rectangle(image_grey, (x,y), (x+w, y+h), (0,300,0), 2)
cv2_imshow(image)

eye_detections = eye_detector.detectMultiScale(image)
for (x,y,w,h) in eye_detections:
  cv2.rectangle(image, (x,y), (x+w, y+h), (0,300,0), 2)
cv2_imshow(image)

